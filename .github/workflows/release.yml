# Build and publish a Docker image on release.
name: "Build and Publish Docker image"

on:
  release:
    types: [published] # Trigger only when a release is published

# Add permissions to write packages
permissions:
  contents: read # Needed to checkout the code
  packages: write # Needed to push docker image to GHCR

env:
  # Update the image name for your repository
  NIU_BASE_IMG: ghcr.io/${{ github.repository }}

jobs:
  # Combined build and push job for simplicity, assuming single platform for now.
  # If multi-platform is needed later, this can be split back into build/publish.
  docker-build-publish:
    # Use github.repository directly in the job name as env context isn't available here
    name: Build and Publish Docker image (ghcr.io/${{ github.repository }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Check tag matches pyproject.toml version
        id: version_check
        run: |
          # Extract version from pyproject.toml
          version=$(grep "version = " pyproject.toml | sed -e 's/version = "\(.*\)"/\1/g')
          # Get the tag name from the release event (e.g., "v1.2.3" or "1.2.3")
          release_tag="${{ github.ref_name }}"
          # Strip 'v' prefix if present
          tag_version=${release_tag#v}

          if [ "${tag_version}" != "${version}" ]; then
            echo "Error: Release tag '${release_tag}' (version '${tag_version}') does not match pyproject.toml version '${version}'." >&2
            exit 1
          else
            echo "Version check passed. Releasing version ${version} from tag ${release_tag}."
            # Set the version as a step output instead of using GITHUB_ENV
            echo "version=${version}" >> $GITHUB_OUTPUT
          fi

      - uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Use github.actor instead of repository_owner for clarity
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.NIU_BASE_IMG }}
          tags: |
            # Tag with the release version (e.g., 1.2.3) - Use step output
            type=raw,value=${{ steps.version_check.outputs.version }}
            # Tag with major.minor (e.g., 1.2) - Use step output
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version_check.outputs.version }}
            # Tag with major (e.g., 1) - Use step output
            type=semver,pattern={{major}},value=${{ steps.version_check.outputs.version }}
            # Tag with 'latest'
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        with:
          context: .
          # Enable pushing since this is a release
          push: true
          # Use tags generated by the metadata action
          tags: ${{ steps.meta.outputs.tags }}
          # Use labels generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }}
          # Add caching using GitHub Actions cache
          cache-from: type=gha,scope=${{ github.workflow }} # Scope cache to this workflow
          cache-to: type=gha,mode=max,scope=${{ github.workflow }} # Write cache